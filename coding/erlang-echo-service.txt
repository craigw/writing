I seemed to get halfway though writing this. It's inconsistent - the predicate 
names don't match in the code and the text. I wonder why I didn't finish 
writing it? It doesn't look too far from complete...

It does look a bit like I was going to talk about building a sane project 
structure. Maybe the article would survive without that?

I'll hopefully get it finished eventually, but in case I don't, here's where
I got to.






<p>The <a href="http://linuxmafia.com/pub/linux/suse-linux-internals/chapter12.html#section12.1.1">echo service</a> is pretty simple. Sent a set of bytes it returns them unmodified to the client. Such a service makes for a good initial foray into writing servers Erlang.</p>

<p>As with most Erlang modules, start by declaring the namespace, the exports and imports, and various other pieces of metadata.</p>

<pre><code class="erlang">-module(com.barkingiguana.examples.echo.server).
-author('Craig R Webster <craig@barkingiguana.com>').
-export([listen/0]).
-import(gen_tcp).
-import(io).</code></pre>

<h1>Quick tangent about packaging and directory structure.</h1>

<p>With that set up, now define the function that will launch the server. <code class="erlang">launch/0</code> doesn't take any arguments. In a more real-world scenario I'd probably export <code class="erlang">launch/1</code> too which allows the client to pick the port to listen on.</p>

<pre><code class="erlang">% A utility function that just picks a port and asks
% the server to listen on it.
listen() -> listen(33345).</pre><code>

<p>........</p>

<pre><code class="erlang">listen(Port) ->
  {ok, Listen} = gen_tcp:listen(Port, [
    binary, {packet, 4}, {reuseaddr, true}, {active, true}
  ]),
  io:format("[~p] !! Server started.~n", [erlang:localtime()]),
  handle_requests(Listen).

handle_requests(Listen) ->
  {ok, Socket} = gen_tcp:accept(Listen),
  io:format("[~p] !! Accept (~p)~n", [erlang:localtime(), Socket]),
  handle_request(Socket),
  handle_requests(Listen).

handle_request(Socket) ->
  receive
    {tcp, Socket, Data} ->
      Request = binary_to_term(Data),
      io:format("[~p] << ~p (~p)~n", [erlang:localtime(), Request, Socket]),
      gen_tcp:send(Socket, Data),
      io:format("[~p] >> ~p~n", [erlang:localtime(), Request]),
      handle_request(Socket);
    {tcp_closed, Socket} ->
      io:format("[~p] !! Socket Closed (~p)~n", [erlang:localtime(), Socket])
  end.</code></pre>

<h4>Client</h4>

<pre><code class="erlang">-module(com.barkingiguana.example.echo.client).
-author('Craig R Webster <craig@barkingiguana.com>').
-export([yell/0]).
-import(gen_tcp).
-import(io).

yell() -> yell("Hello!").
yell(Words) ->
  {ok, Socket} = gen_tcp:connect("127.0.0.1", 33345, [binary, {packet, 4}]),
  io:format("[~p] >> ~p~n", [erlang:localtime(), Words]),
  ok = gen_tcp:send(Socket, term_to_binary(Words)),
  receive
    {tcp, Socket, Data} ->
      Response = binary_to_term(Data),
      io:format("[~p] << ~p~n", [erlang:localtime(), Response]),
      gen_tcp:close(Socket);
    {tcp_closed, Socket} ->
      io:format("[~p] !! Socket Closed (~p)~n", [erlang:localtime(), Socket])
  end.</code></pre>